{"version":3,"file":"appx.js","sourceRoot":"","sources":["../../src/targets/appx.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, asArray, AsyncTaskManager, getArchSuffix, spawn, use } from \"builder-util\"\nimport { copyDir, copyOrLinkFile } from \"builder-util/out/fs\"\nimport _debug from \"debug\"\nimport { emptyDir, mkdir, readdir, readFile, writeFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { deepAssign } from \"read-config-file/out/deepAssign\"\nimport { Target } from \"../core\"\nimport { AppXOptions } from \"../options/winOptions\"\nimport { getTemplatePath } from \"../util/pathManager\"\nimport { getSignVendorPath, isOldWin6 } from \"../windowsCodeSign\"\nimport { WinPackager } from \"../winPackager\"\n\nconst APPX_ASSETS_DIR_NAME = \"appx\"\n\nconst vendorAssetsForDefaultAssets: { [key: string]: string; } = {\n  \"StoreLogo.png\": \"SampleAppx.50x50.png\",\n  \"Square150x150Logo.png\": \"SampleAppx.150x150.png\",\n  \"Square44x44Logo.png\": \"SampleAppx.44x44.png\",\n  \"Wide310x150Logo.png\": \"SampleAppx.310x150.png\",\n}\n\nconst DEFAULT_RESOURCE_LANG = \"en-US\"\nconst debug = _debug(\"electron-builder:appx\")\n\nexport default class AppXTarget extends Target {\n  readonly options: AppXOptions = deepAssign({}, this.packager.platformSpecificBuildOptions, this.packager.config.appx)\n\n  constructor(private readonly packager: WinPackager, readonly outDir: string) {\n    super(\"appx\")\n\n    if (process.platform !== \"win32\" || isOldWin6() || process.env.PARALLELS_VM_ID == null) {\n      throw new Error(\"AppX is supported only on Windows 10 or Windows Server 2012 R2 (version number 6.3+)\")\n    }\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n\n    const cscInfo = await this.packager.cscInfo.value\n    if (cscInfo == null) {\n      throw new Error(\"AppX package must be signed, but certificate is not set, please see https://electron.build/code-signing\\n\\nYou can use `electron-builder create-self-signed-cert -p YourName` to create self-signed certificate\")\n    }\n\n    let publisher = this.options.publisher\n    if (publisher == null) {\n      const cscFile = cscInfo.file\n      if (cscFile == null) {\n        throw new Error(\"Please specify appx.publisher: cannot get publisher from your code signing certificate if EV cert is used\")\n      }\n\n      publisher = await packager.computedPublisherSubjectOnWindowsOnly.value\n      if (!publisher) {\n        throw new Error(\"Please specify appx.publisher, cannot compute from p12 file\")\n      }\n    }\n\n    const preAppx = path.join(this.outDir, `pre-appx-${getArchSuffix(arch)}`)\n    await emptyDir(preAppx)\n\n    const assetOutDir = path.join(preAppx, \"assets\")\n    await mkdir(assetOutDir)\n\n    const userAssetDir = await packager.getResource(undefined, APPX_ASSETS_DIR_NAME)\n    let userAssets: Array<string>\n    if (userAssetDir == null) {\n      userAssets = []\n    }\n    else {\n      userAssets = (await readdir(userAssetDir)).filter(it => !it.startsWith(\".\") && !it.endsWith(\".db\") && it.includes(\".\"))\n      await BluebirdPromise.map(userAssets, it => copyOrLinkFile(path.join(userAssetDir, it), path.join(assetOutDir, it)))\n    }\n\n    const vendorPath = await getSignVendorPath()\n    const taskManager = new AsyncTaskManager(packager.info.cancellationToken)\n    taskManager.addTask(BluebirdPromise.map(Object.keys(vendorAssetsForDefaultAssets), defaultAsset => {\n      if (!isDefaultAssetIncluded(userAssets, defaultAsset)) {\n        return copyOrLinkFile(path.join(vendorPath, \"appxAssets\", vendorAssetsForDefaultAssets[defaultAsset]), path.join(assetOutDir, defaultAsset))\n      }\n      return null\n    }))\n    taskManager.addTask(this.writeManifest(getTemplatePath(\"appx\"), preAppx, arch, publisher!, userAssets))\n    taskManager.addTask(copyDir(appOutDir, path.join(preAppx, \"app\")))\n    await taskManager.awaitTasks()\n\n    const artifactName = packager.expandArtifactNamePattern(this.options, \"appx\", arch)\n    const artifactPath = path.join(this.outDir, artifactName)\n    const makeAppXArgs = [\"pack\", \"/o\", \"/d\", preAppx, \"/p\", artifactPath]\n\n    // we do not use process.arch to build path to tools, because even if you are on x64, ia32 appx tool must be used if you build appx for ia32\n    if (isScaledAssetsProvided(userAssets)) {\n      const priConfigPath = path.join(preAppx, \"priconfig.xml\")\n      const makePriPath = path.join(vendorPath, \"windows-10\", Arch[arch], \"makepri.exe\")\n      await spawn(makePriPath, [\"createconfig\", \"/cf\", priConfigPath, \"/dq\", \"en-US\", \"/pv\", \"10.0.0\", \"/o\"], undefined, {isDebugEnabled: debug.enabled})\n      await spawn(makePriPath, [\"new\", \"/pr\", preAppx, \"/cf\", priConfigPath, \"/of\", preAppx], undefined, {isDebugEnabled: debug.enabled})\n\n      makeAppXArgs.push(\"/l\")\n    }\n\n    use(this.options.makeappxArgs, (it: Array<string>) => makeAppXArgs.push(...it))\n    // wine supports only ia32 binary in any case makeappx crashed on wine\n    if (process.env.PARALLELS_VM_ID) {\n      await spawn(path.join(vendorPath, \"windows-10\", Arch[arch], \"makeappx.exe\"), makeAppXArgs, undefined, {isDebugEnabled: debug.enabled})\n    }\n    else {\n      await spawn(path.join(vendorPath, \"windows-10\", Arch[arch], \"makeappx.exe\"), makeAppXArgs, undefined, {isDebugEnabled: debug.enabled})\n    }\n    await packager.sign(artifactPath)\n\n    packager.info.dispatchArtifactCreated({\n      file: artifactPath,\n      packager,\n      arch,\n      safeArtifactName: packager.computeSafeArtifactName(artifactName, \"appx\"),\n      target: this,\n      isWriteUpdateInfo: this.options.electronUpdaterAware,\n    })\n  }\n\n  private async writeManifest(templatePath: string, preAppx: string, arch: Arch, publisher: string, userAssets: Array<string>) {\n    const appInfo = this.packager.appInfo\n    const options = this.options\n    const manifest = (await readFile(path.join(templatePath, \"appxmanifest.xml\"), \"utf8\"))\n      .replace(/\\$\\{([a-zA-Z0-9]+)\\}/g, (match, p1): string => {\n        switch (p1) {\n          case \"publisher\":\n            return publisher\n\n          case \"publisherDisplayName\":\n            const name = options.publisherDisplayName || appInfo.companyName\n            if (name == null) {\n              throw new Error(`Please specify \"author\" in the application package.json — it is required because \"appx.publisherDisplayName\" is not set.`)\n            }\n            return name\n\n          case \"version\":\n            return appInfo.versionInWeirdWindowsForm\n\n          case \"applicationId\":\n            const result = options.applicationId || options.identityName || appInfo.name\n            if (!isNaN(parseInt(result[0], 10))) {\n              let message = `AppX Application.Id can’t start with numbers: \"${result}\"`\n              if (options.applicationId == null) {\n                message += `\\nPlease set appx.applicationId (or correct appx.identityName or name)`\n              }\n              throw new Error(message)\n            }\n            return result\n\n          case \"identityName\":\n            return options.identityName  || appInfo.name\n\n          case \"executable\":\n            return `app\\\\${appInfo.productFilename}.exe`\n\n          case \"displayName\":\n            return options.displayName || appInfo.productName\n\n          case \"description\":\n            return appInfo.description || appInfo.productName\n\n          case \"backgroundColor\":\n            return options.backgroundColor || \"#464646\"\n\n          case \"logo\":\n            return \"assets\\\\StoreLogo.png\"\n\n          case \"square150x150Logo\":\n            return \"assets\\\\Square150x150Logo.png\"\n\n          case \"square44x44Logo\":\n            return \"assets\\\\Square44x44Logo.png\"\n\n          case \"lockScreen\":\n            return lockScreenTag(userAssets)\n\n          case \"defaultTile\":\n            return defaultTileTag(userAssets)\n\n          case \"splashScreen\":\n            return splashScreenTag(userAssets)\n\n          case \"arch\":\n            return arch === Arch.ia32 ? \"x86\" : \"x64\"\n\n          case \"resourceLanguages\":\n            return resourceLanguageTag(asArray(options.languages))\n\n          default:\n            throw new Error(`Macro ${p1} is not defined`)\n        }\n      })\n    await writeFile(path.join(preAppx, \"appxmanifest.xml\"), manifest)\n  }\n}\n\n// get the resource - language tag, see https://docs.microsoft.com/en-us/windows/uwp/globalizing/manage-language-and-region#specify-the-supported-languages-in-the-apps-manifest\nfunction resourceLanguageTag(userLanguages: Array<string> | null | undefined): string {\n  if (userLanguages == null || userLanguages.length === 0) {\n    userLanguages = [DEFAULT_RESOURCE_LANG]\n  }\n  return userLanguages.map(it => `<Resource Language=\"${it.replace(/_/g, \"-\")}\" />`).join(\"\\n\")\n}\n\nfunction lockScreenTag(userAssets: Array<string>): string {\n  if (isDefaultAssetIncluded(userAssets, \"BadgeLogo.png\")) {\n    return '<uap:LockScreen Notification=\"badgeAndTileText\" BadgeLogo=\"assets\\\\BadgeLogo.png\" />'\n  }\n  else {\n    return \"\"\n  }\n}\n\nfunction defaultTileTag(userAssets: Array<string>): string {\n  const defaultTiles: Array<string> = [\"<uap:DefaultTile\", 'Wide310x150Logo=\"assets\\\\Wide310x150Logo.png\"']\n\n  if (isDefaultAssetIncluded(userAssets, \"LargeTile.png\")) {\n    defaultTiles.push('Square310x310Logo=\"assets\\\\LargeTile.png\"')\n  }\n  if (isDefaultAssetIncluded(userAssets, \"SmallTile.png\")) {\n    defaultTiles.push('Square71x71Logo=\"assets\\\\SmallTile.png\"')\n  }\n\n  defaultTiles.push(\"/>\")\n  return defaultTiles.join(\" \")\n}\n\nfunction splashScreenTag(userAssets: Array<string>): string {\n  if (isDefaultAssetIncluded(userAssets, \"SplashScreen.png\")) {\n    return '<uap:SplashScreen Image=\"assets\\\\SplashScreen.png\" />'\n  }\n  else {\n    return \"\"\n  }\n}\n\nfunction isDefaultAssetIncluded(userAssets: Array<string>, defaultAsset: string) {\n  const defaultAssetName = defaultAsset.substring(0, defaultAsset.indexOf(\".\"))\n  return userAssets.some(it => it.includes(defaultAssetName))\n}\n\nfunction isScaledAssetsProvided(userAssets: Array<string>) {\n  return userAssets.some(it => it.includes(\".scale-\") || it.includes(\".targetsize-\"))\n}\n\nexport function quoteString(s: string): string {\n  if (!s.includes(\",\") && !s.includes('\"')) {\n    return s\n  }\n\n  return `\"${s.replace(/\"/g, '\\\\\"')}\"`\n}\n"]}
