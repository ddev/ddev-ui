{"version":3,"file":"appImage.js","sourceRoot":"","sources":["../../src/targets/appImage.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, exec, log } from \"builder-util\"\nimport { UUID } from \"builder-util-runtime\"\nimport { getBin, getBinFromGithub } from \"builder-util/out/binDownload\"\nimport { unlinkIfExists } from \"builder-util/out/fs\"\nimport * as ejs from \"ejs\"\nimport { chmod, close, createReadStream, createWriteStream, open, outputFile, readFile, write } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { Target } from \"../core\"\nimport { LinuxPackager } from \"../linuxPackager\"\nimport { AppImageOptions } from \"../options/linuxOptions\"\nimport { getTemplatePath } from \"../util/pathManager\"\nimport { LinuxTargetHelper } from \"./LinuxTargetHelper\"\n\nconst appImageVersion = process.platform === \"darwin\" ? \"AppImage-17-06-17-mac\" : \"AppImage-09-07-16-linux\"\n//noinspection SpellCheckingInspection\nconst appImagePathPromise = process.platform === \"darwin\" ?\n  getBinFromGithub(\"AppImage\", \"17-06-17-mac\", \"vIaikS8Z2dEnZXKSgtcTn4gimPHCclp+v62KV2Eh9EhxvOvpDFgR3FCgdOsON4EqP8PvnfifNtxgBixCfuQU0A==\") :\n  getBin(\"AppImage\", appImageVersion, `https://dl.bintray.com/electron-userland/bin/${appImageVersion}.7z`, \"ac324e90b502f4e995f6a169451dbfc911bb55c0077e897d746838e720ae0221\")\n\nconst appRunTemplate = new Lazy<(data: any) => string>(async () => {\n  return ejs.compile(await readFile(path.join(getTemplatePath(\"linux\"), \"AppRun.sh\"), \"utf-8\"))\n})\n\nexport default class AppImageTarget extends Target {\n  readonly options: AppImageOptions = {...this.packager.platformSpecificBuildOptions, ...(this.packager.config as any)[this.name]}\n  private readonly desktopEntry: Promise<string>\n\n  constructor(ignored: string, private readonly packager: LinuxPackager, private readonly helper: LinuxTargetHelper, readonly outDir: string) {\n    super(\"appImage\")\n\n    // we add X-AppImage-BuildId to ensure that new desktop file will be installed\n    this.desktopEntry = helper.computeDesktopEntry(this.options, \"AppRun\", null, {\n      \"X-AppImage-Version\": `${packager.appInfo.buildVersion}`,\n      \"X-AppImage-BuildId\": UUID.v1(),\n    })\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    log(`Building AppImage for arch ${Arch[arch]}`)\n\n    const packager = this.packager\n\n    // https://github.com/electron-userland/electron-builder/issues/775\n    // https://github.com/electron-userland/electron-builder/issues/1726\n    const artifactName = this.options.artifactName == null ? packager.computeSafeArtifactName(null, \"AppImage\", arch, false)!! : packager.expandArtifactNamePattern(this.options, \"AppImage\", arch)\n    const resultFile = path.join(this.outDir, artifactName)\n    await unlinkIfExists(resultFile)\n\n    const finalDesktopFilename = `${this.packager.executableName}.desktop`\n\n    const appRunData = (await appRunTemplate.value)({\n      systemIntegration: this.options.systemIntegration || \"ask\",\n      desktopFileName: finalDesktopFilename,\n      executableName: this.packager.executableName,\n      resourceName: `appimagekit-${this.packager.executableName}`,\n    })\n    const appRunFile = await packager.getTempFile(\".sh\")\n    await outputFile(appRunFile, appRunData, {\n      mode: \"0755\",\n    })\n\n    const desktopFile = await this.desktopEntry\n    const appImagePath = await appImagePathPromise\n    const args = [\n      \"-joliet\", \"on\",\n      \"-volid\", \"AppImage\",\n      \"-dev\", resultFile,\n      \"-padding\", \"0\",\n      \"-map\", appOutDir, \"/usr/bin\",\n      \"-map\", appRunFile, \"/AppRun\",\n      // we get executable name in the AppRun by desktop file name, so, must be named as executable\n      \"-map\", desktopFile, `/${finalDesktopFilename}`,\n    ]\n    for (const [from, to] of (await this.helper.icons)) {\n      args.push(\"-map\", from, `/usr/share/icons/default/${to}`)\n    }\n\n    // must be after this.helper.icons call\n    if (this.helper.maxIconPath == null) {\n      throw new Error(\"Icon is not provided\")\n    }\n    args.push(\"-map\", this.helper.maxIconPath, \"/.DirIcon\")\n\n    if (arch === Arch.x64 || arch === Arch.ia32) {\n      // noinspection SpellCheckingInspection\n      args.push(\"-map\", path.join(await getBinFromGithub(\"appimage-packages\", \"25-09-17\", \"op5TeNhsqVD6X1AC4QukdpNPk2+7b3TNmiVFQdgLmAdnk3xzC7ZxXqYWmvRzQjyoIV4aHbq/iYTpfWwjRwi5XQ==\"), arch === Arch.x64 ? \"x86_64-linux-gnu\" : \"i386-linux-gnu\"), \"/usr/lib\")\n    }\n\n    args.push(\"-chown_r\", \"0\", \"/\", \"--\")\n    args.push(\"-zisofs\", `level=${process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL || (packager.config.compression === \"store\" ? \"0\" : \"9\")}:block_size=128k:by_magic=off`)\n    args.push(\"set_filter_r\", \"--zisofs\", \"/\")\n\n    if (this.packager.packagerOptions.effectiveOptionComputed != null && await this.packager.packagerOptions.effectiveOptionComputed([args, desktopFile])) {\n      return\n    }\n\n    await exec(process.arch !== \"x64\" || (process.env.USE_SYSTEM_XORRISO === \"true\" || process.env.USE_SYSTEM_XORRISO === \"\") ? \"xorriso\" : path.join(appImagePath, \"xorriso\"), args, {\n      maxBuffer: 2 * 1024 * 1024\n    })\n\n    await new BluebirdPromise((resolve, reject) => {\n      const rd = createReadStream(path.join(appImagePath, arch === Arch.ia32 ? \"32\" : \"64\", \"runtime\"))\n      rd.on(\"error\", reject)\n      const wr = createWriteStream(resultFile, {flags: \"r+\"})\n      wr.on(\"error\", reject)\n      wr.on(\"close\", resolve)\n      rd.pipe(wr)\n    })\n\n    const fd = await open(resultFile, \"r+\")\n    try {\n      const magicData = Buffer.from([0x41, 0x49, 0x01])\n      await write(fd, magicData, 0, magicData.length, 8)\n    }\n    finally {\n      await close(fd)\n    }\n\n    await chmod(resultFile, \"0755\")\n\n    packager.dispatchArtifactCreated(resultFile, this, arch, packager.computeSafeArtifactName(artifactName, \"AppImage\", arch, false))\n  }\n}\n"]}
