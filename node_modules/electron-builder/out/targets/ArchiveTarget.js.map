{"version":3,"file":"ArchiveTarget.js","sourceRoot":"","sources":["../../src/targets/ArchiveTarget.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,AAAO,AAAQ,AAAG,AAAE,AAAM,AAAc;;;;AACxC,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAE,AAAM,AAAS;;;;;;AAE1C,AAAO,AAAE,AAAO,AAAE,AAAG,AAAE,AAAM,AAAW,AAExC,AAAM;;;;;;MAAqB,AAAQ,AAAM;AAGvC,gBAAY,AAAY,MAAW,AAAc,QAAmB,AAA+B;AACjG,AAAK,cAAC,AAAI,AAAC;AADsB,aAAM,SAAN,AAAM,AAAQ;AAAmB,aAAQ,WAAR,AAAQ,AAAuB;AAF1F,aAAO,UAAI,AAAI,KAAC,AAAQ,SAAC,AAAc,OAAC,AAAI,KAAC,AAAI,AAAC,AAI3D;AAAC;AAEK,AAAK,SAAX,AAAK,CAAO,AAAiB,WAAE,AAAU;;;;AACvC,kBAAM,AAAQ,WAAG,AAAI,MAAC,AAAQ;AAC9B,kBAAM,AAAK,QAAG,AAAQ,SAAC,AAAQ,aAAK,AAAQ,iCAAC,AAAG;AAChD,kBAAM,AAAM,SAAG,AAAI,MAAC,AAAI;AACxB,AAAG,AAAC,uEAAY,AAAK,QAAG,AAAQ,WAAG,AAAE,KAAG,AAAM,MAAE,AAAC;AAEjD,AAA6B;AAC7B,AAA6C;AAC7C,kBAAM,AAAO,UAAG,AAAI,MAAC,AAAI,KAAC,AAAI,MAAC,AAAM,QAAE,AAAQ,SAAC,AAAyB,0BAAC,AAAI,MAAC,AAAO,SAAE,AAAM,QAAE,AAAI,MAAE,AAAQ,SAAC,AAAQ,aAAK,AAAQ,iCAAC,AAAK,QAAG,AAAmC,sCAAG,AAAgD,AAAC,AAAC;AACrO,AAAE,AAAC,gBAAC,AAAM,OAAC,AAAU,WAAC,AAAM,AAAC,AAAC,SAAC,AAAC;AAC9B,sBAAM,AAAG,uCAAC,AAAQ,SAAC,AAAM,OAAC,AAAW,aAAE,AAAM,QAAE,AAAO,SAAE,AAAS,WAAE,AAAK,AAAC,AAC3E;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,sBAAM,AAAO,2CAAC,AAAQ,SAAC,AAAM,OAAC,AAAW,aAAE,AAAM,QAAE,AAAO,SAAE,AAAS,WAAE,EAAC,AAAU,YAAE,CAAC,AAAK,AAAC,AAAC,AAC9F;AAAC;AAED,AAAQ,qBAAC,AAAuB,wBAAC,AAAO,AAAE,AAAI,gBAAE,AAAI,MAAE,AAAK,QAAG,AAAQ,SAAC,AAAa,cAAC,AAAM,QAAE,AAAK,OAAE,AAAI,AAAC,QAAG,AAAQ,SAAC,AAAY,aAAC,AAAM,QAAE,AAAI,MAAE,AAAI,MAAE,AAAQ,SAAC,AAAQ,aAAK,AAAQ,iCAAC,AAAO,UAAG,AAAK,QAAG,AAAI,AAAC,AAAC,AAC/M;;AAAC,AACF","sourcesContent":["import { Arch, log } from \"builder-util\"\nimport * as path from \"path\"\nimport { Platform, Target } from \"../core\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { archive, tar } from \"./archive\"\n\nexport class ArchiveTarget extends Target {\n  readonly options = (this.packager.config as any)[this.name]\n\n  constructor(name: string, readonly outDir: string, private readonly packager: PlatformPackager<any>) {\n    super(name)\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n    const isMac = packager.platform === Platform.MAC\n    const format = this.name\n    log(`Building ${isMac ? \"macOS \" : \"\"}${format}`)\n\n    // do not specify arch if x64\n    // tslint:disable:no-invalid-template-strings\n    const outFile = path.join(this.outDir, packager.expandArtifactNamePattern(this.options, format, arch, packager.platform === Platform.LINUX ? \"${name}-${version}-${arch}.${ext}\" : \"${productName}-${version}-${arch}-${os}.${ext}\"))\n    if (format.startsWith(\"tar.\")) {\n      await tar(packager.config.compression, format, outFile, appOutDir, isMac)\n    }\n    else {\n      await archive(packager.config.compression, format, outFile, appOutDir, {withoutDir: !isMac})\n    }\n\n    packager.dispatchArtifactCreated(outFile, this, arch, isMac ? packager.generateName2(format, \"mac\", true) : packager.generateName(format, arch, true, packager.platform === Platform.WINDOWS ? \"win\" : null))\n  }\n}"]}
