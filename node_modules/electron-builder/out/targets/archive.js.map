{"version":3,"file":"archive.js","sourceRoot":"","sources":["../../src/targets/archive.ts"],"names":[],"mappings":"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","sourcesContent":["import { path7x, path7za } from \"7zip-bin\"\nimport { debug7z, debug7zArgs, isMacOsSierra, spawn } from \"builder-util\"\nimport { computeEnv, getLinuxToolsPath } from \"builder-util/out/bundledTool\"\nimport { exists } from \"builder-util/out/fs\"\nimport { unlink } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { CompressionLevel } from \"../core\"\n\nclass CompressionDescriptor {\n  constructor(readonly flag: string, readonly env: string, readonly minLevel: string, readonly maxLevel: string = \"-9\") {\n  }\n}\n\nconst extToCompressionDescriptor: { [key: string]: CompressionDescriptor; } = {\n  \"tar.xz\": new CompressionDescriptor(`-I'${path7x}'`, \"XZ_OPT\", \"-0\", \"-9e\"),\n  \"tar.lz\": new CompressionDescriptor(\"--lzip\", \"LZOP\", \"-0\"),\n  \"tar.gz\": new CompressionDescriptor(\"--gz\", \"GZIP\", \"-1\"),\n  \"tar.bz2\": new CompressionDescriptor(\"--bzip2\", \"BZIP2\", \"-1\"),\n}\n\n/** @internal */\nexport async function tar(compression: CompressionLevel | null | undefined, format: string, outFile: string, dirToArchive: string, isMacApp: boolean = false) {\n  // we don't use 7z here - develar: I spent a lot of time making pipe working - but it works on MacOS and often hangs on Linux (even if use pipe-io lib)\n  // and in any case it is better to use system tools (in the light of docker - it is not problem for user because we provide complete docker image).\n  const info = extToCompressionDescriptor[format]\n  let tarEnv = process.env\n  if (process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL != null) {\n    tarEnv = {...tarEnv}\n    tarEnv[info.env] = \"-\" + process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL\n  }\n  else if (compression != null && compression !== \"normal\") {\n    tarEnv = {...tarEnv}\n    tarEnv[info.env] = compression === \"store\" ? info.minLevel : info.maxLevel\n  }\n\n  const args = [info.flag, \"-cf\", outFile]\n  if (!isMacApp) {\n    args.push(\"--transform\", `s,^\\\\.,${path.basename(outFile, \".\" + format)},`)\n  }\n  args.push(isMacApp ? path.basename(dirToArchive) : \".\")\n\n  if (await isMacOsSierra()) {\n    const linuxToolsPath = await getLinuxToolsPath()\n    tarEnv = {\n      ...tarEnv,\n      PATH: computeEnv(process.env.PATH, [path.join(linuxToolsPath, \"bin\")]),\n      LANG: \"en_US.UTF-8\",\n      LC_CTYPE: \"UTF-8\",\n      SZA_PATH: path7za,\n    }\n  }\n\n  await spawn(process.platform === \"darwin\" || process.platform === \"freebsd\" ? \"gtar\" : \"tar\", args, {\n    cwd: isMacApp ? path.dirname(dirToArchive) : dirToArchive,\n    env: tarEnv,\n  })\n  return outFile\n}\n\nexport interface ArchiveOptions {\n  /**\n   * @default false\n   */\n  withoutDir?: boolean\n\n  /**\n   * @default true\n   */\n  solid?: boolean\n\n  /**\n   * @default true\n   */\n  isArchiveHeaderCompressed?: boolean\n\n  listFile?: string\n\n  dictSize?: number\n  excluded?: Array<string>\n\n  method?: \"Copy\" | \"LZMA\" | \"Deflate\"\n}\n\nexport function compute7zCompressArgs(compression: CompressionLevel | any | any, format: string, options: ArchiveOptions = {}) {\n  let storeOnly = compression === \"store\"\n  const args = debug7zArgs(\"a\")\n\n  let isLevelSet = false\n  if (process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL != null) {\n    storeOnly = false\n    args.push(`-mx=${process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL}`)\n    isLevelSet = true\n  }\n\n  if (format === \"zip\" && compression === \"maximum\") {\n    // http://superuser.com/a/742034\n    args.push(\"-mfb=258\", \"-mpass=15\")\n  }\n\n  if (!isLevelSet && !storeOnly) {\n    args.push(\"-mx=9\")\n  }\n\n  if (options.dictSize != null) {\n    args.push(`-md=${options.dictSize}m`)\n  }\n\n  // https://sevenzip.osdn.jp/chm/cmdline/switches/method.htm#7Z\n  // https://stackoverflow.com/questions/27136783/7zip-produces-different-output-from-identical-input\n  // tc and ta are off by default, but to be sure, we explicitly set it to off\n  // disable \"Stores NTFS timestamps for files: Modification time, Creation time, Last access time.\" to produce the same archive for the same data\n  args.push(\"-mtc=off\")\n\n  if (format === \"7z\" || format.endsWith(\".7z\")) {\n    if (options.solid === false) {\n      args.push(\"-ms=off\")\n    }\n\n    if (options.isArchiveHeaderCompressed === false) {\n      args.push(\"-mhc=off\")\n    }\n\n    // args valid only for 7z\n    // -mtm=off disable \"Stores last Modified timestamps for files.\"\n    args.push(\"-mtm=off\", \"-mta=off\")\n  }\n\n  if (options.method != null) {\n    args.push(`-mm=${options.method}`)\n  }\n  else if (format === \"zip\" || storeOnly) {\n    args.push(`-mm=${storeOnly ? \"Copy\" : \"Deflate\"}`)\n  }\n\n  if (format === \"zip\") {\n    // -mcu switch:  7-Zip uses UTF-8, if there are non-ASCII symbols.\n    // because default mode: 7-Zip uses UTF-8, if the local code page doesn't contain required symbols.\n    // but archive should be the same regardless where produced\n    args.push(\"-mcu\")\n  }\n  return args\n}\n\n// 7z is very fast, so, use ultra compression\n/** @internal */\nexport async function archive(compression: CompressionLevel | null | undefined, format: string, outFile: string, dirToArchive: string, options: ArchiveOptions = {}): Promise<string> {\n  const args = compute7zCompressArgs(compression, format, options)\n  // remove file before - 7z doesn't overwrite file, but update\n  try {\n    await unlink(outFile)\n  }\n  catch (e) {\n    // ignore\n  }\n\n  args.push(outFile, options.listFile == null ? (options.withoutDir ? \".\" : path.basename(dirToArchive)) : `@${options.listFile}`)\n  if (options.excluded != null) {\n    args.push(...options.excluded)\n  }\n\n  try {\n    await spawn(path7za, args, {\n      cwd: options.withoutDir ? dirToArchive : path.dirname(dirToArchive),\n    }, {isDebugEnabled: debug7z.enabled})\n  }\n  catch (e) {\n    if (e.code === \"ENOENT\" && !(await exists(dirToArchive))) {\n      throw new Error(`Cannot create archive: \"${dirToArchive}\" doesn't exist`)\n    }\n    else {\n      throw e\n    }\n  }\n\n  return outFile\n}"]}
