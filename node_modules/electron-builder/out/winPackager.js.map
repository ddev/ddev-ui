{"version":3,"file":"winPackager.js","sourceRoot":"","sources":["../src/winPackager.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, asArray, exec, execWine, log, use, warn } from \"builder-util\"\nimport { parseDn } from \"builder-util-runtime\"\nimport { createHash } from \"crypto\"\nimport _debug from \"debug\"\nimport { close, open, read, rename } from \"fs-extra-p\"\nimport isCI from \"is-ci\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { downloadCertificate } from \"./codeSign\"\nimport { AfterPackContext } from \"./configuration\"\nimport { DIR_TARGET, Platform, Target } from \"./core\"\nimport { RequestedExecutionLevel, WindowsConfiguration } from \"./options/winOptions\"\nimport { Packager } from \"./packager\"\nimport { PlatformPackager } from \"./platformPackager\"\nimport AppXTarget from \"./targets/appx\"\nimport { NsisTarget } from \"./targets/nsis/nsis\"\nimport { AppPackageHelper } from \"./targets/nsis/nsisUtil\"\nimport { WebInstallerTarget } from \"./targets/nsis/WebInstallerTarget\"\nimport { createCommonTarget } from \"./targets/targetFactory\"\nimport { BuildCacheManager, digest } from \"./util/cacheManager\"\nimport { isBuildCacheEnabled } from \"./util/flags\"\nimport { time } from \"./util/timer\"\nimport { FileCodeSigningInfo, getSignVendorPath, sign, WindowsSignOptions } from \"./windowsCodeSign\"\n\nexport class WinPackager extends PlatformPackager<WindowsConfiguration> {\n  readonly cscInfo = new Lazy<FileCodeSigningInfo | null>(() => {\n    const platformSpecificBuildOptions = this.platformSpecificBuildOptions\n    const subjectName = platformSpecificBuildOptions.certificateSubjectName\n    if (subjectName != null) {\n      return BluebirdPromise.resolve({subjectName})\n    }\n\n    const certificateSha1 = platformSpecificBuildOptions.certificateSha1\n    if (certificateSha1 != null) {\n      return BluebirdPromise.resolve({certificateSha1})\n    }\n\n    const certificateFile = platformSpecificBuildOptions.certificateFile\n    if (certificateFile != null) {\n      const certificatePassword = this.getCscPassword()\n      return BluebirdPromise.resolve({\n        file: certificateFile,\n        password: certificatePassword == null ? null : certificatePassword.trim(),\n      })\n    }\n    else {\n      const cscLink = process.env.WIN_CSC_LINK || this.packagerOptions.cscLink\n      if (cscLink != null) {\n        return downloadCertificate(cscLink, this.info.tempDirManager, this.projectDir)\n          .then(path => {\n            return {\n              file: path,\n              password: this.getCscPassword(),\n            }\n          })\n      }\n      else {\n        return BluebirdPromise.resolve(null)\n      }\n    }\n  })\n\n  private _iconPath = new Lazy<string | null>(() => this.getValidIconPath())\n\n  readonly computedPublisherSubjectOnWindowsOnly = new Lazy<string | null>(async () => {\n    const cscInfo = await this.cscInfo.value\n    if (cscInfo == null) {\n      return null\n    }\n\n    // https://github.com/electron-userland/electron-builder/issues/1735\n    const args = cscInfo.password ? [`(Get-PfxData \"${cscInfo.file!}\" -Password (ConvertTo-SecureString -String \"${cscInfo.password}\" -Force -AsPlainText)).EndEntityCertificates.Subject`] : [`(Get-PfxCertificate \"${cscInfo.file!}\").Subject`]\n    return await exec(\"powershell.exe\", args, {timeout: 30 * 1000}).then(it => it.trim())\n  })\n\n  readonly computedPublisherName = new Lazy<Array<string> | null>(async () => {\n    let publisherName = (this.platformSpecificBuildOptions as WindowsConfiguration).publisherName\n    if (publisherName === null) {\n      return null\n    }\n\n    const cscInfo = await this.cscInfo.value\n    if (cscInfo == null) {\n      return null\n    }\n\n    const cscFile = cscInfo.file\n    if (publisherName == null && cscFile != null) {\n      if (process.platform === \"win32\") {\n        try {\n          const subject = await this.computedPublisherSubjectOnWindowsOnly.value\n          const commonName = subject == null ? null : parseDn(subject).get(\"CN\")\n          if (commonName) {\n            return asArray(commonName)\n          }\n        }\n        catch (e) {\n          warn(`Cannot get publisher name using powershell: ${e.message}`)\n        }\n      }\n\n      try {\n        publisherName = await extractCommonNameUsingOpenssl(cscInfo.password || \"\", cscFile)\n      }\n      catch (e) {\n        throw new Error(`Cannot extract publisher name from code signing certificate, please file issue. As workaround, set win.publisherName: ${e.stack || e}`)\n      }\n    }\n\n    return publisherName == null ? null : asArray(publisherName)\n  })\n\n  get isForceCodeSigningVerification(): boolean {\n    return this.platformSpecificBuildOptions.verifyUpdateCodeSignature !== false\n  }\n\n  constructor(info: Packager) {\n    super(info)\n  }\n\n  get defaultTarget(): Array<string> {\n    return [\"nsis\"]\n  }\n\n  protected doGetCscPassword(): string | undefined {\n    return this.platformSpecificBuildOptions.certificatePassword || process.env.WIN_CSC_KEY_PASSWORD || super.doGetCscPassword()\n  }\n\n  createTargets(targets: Array<string>, mapper: (name: string, factory: (outDir: string) => Target) => void): void {\n    let helper: AppPackageHelper | null\n    const getHelper = () => {\n      if (helper == null) {\n        helper = new AppPackageHelper()\n      }\n      return helper\n    }\n\n    for (const name of targets) {\n      if (name === DIR_TARGET) {\n        continue\n      }\n\n      if (name === \"nsis\" || name === \"portable\") {\n        mapper(name, outDir => new NsisTarget(this, outDir, name, getHelper()))\n      }\n      else if (name === \"nsis-web\") {\n        // package file format differs from nsis target\n        mapper(name, outDir => new WebInstallerTarget(this, path.join(outDir, name), name, new AppPackageHelper()))\n      }\n      else {\n        const targetClass: typeof NsisTarget | typeof AppXTarget | null = (() => {\n          switch (name) {\n            case \"squirrel\":\n              try {\n                return require(\"electron-builder-squirrel-windows\").default\n              }\n              catch (e) {\n                throw new Error(`Module electron-builder-squirrel-windows must be installed in addition to build Squirrel.Windows: ${e.stack || e}`)\n              }\n\n            case \"appx\":\n              return require(\"./targets/appx\").default\n\n            default:\n              return null\n          }\n        })()\n\n        mapper(name, outDir => targetClass === null ? createCommonTarget(name, outDir, this) : new (targetClass as any)(this, outDir, name))\n      }\n    }\n  }\n\n  get platform() {\n    return Platform.WINDOWS\n  }\n\n  getIconPath() {\n    return this._iconPath.value\n  }\n\n  private async getValidIconPath(): Promise<string | null> {\n    let iconPath = this.platformSpecificBuildOptions.icon || this.config.icon\n    if (iconPath != null && !iconPath.endsWith(\".ico\")) {\n      iconPath += \".ico\"\n    }\n\n    iconPath = iconPath == null ? await this.getDefaultIcon(\"ico\") : path.resolve(this.projectDir, iconPath)\n    if (iconPath == null) {\n      return null\n    }\n\n    await checkIcon(iconPath)\n    return iconPath\n  }\n\n  async sign(file: string, logMessagePrefix?: string) {\n    const signOptions: WindowsSignOptions = {\n      path: file,\n      name: this.appInfo.productName,\n      site: await this.appInfo.computePackageUrl(),\n      options: this.platformSpecificBuildOptions,\n    }\n\n    const cscInfo = await this.cscInfo.value\n    if (cscInfo == null) {\n      if (this.platformSpecificBuildOptions.sign != null) {\n        await sign(signOptions)\n      }\n      else if (this.forceCodeSigning) {\n        throw new Error(`App is not signed and \"forceCodeSigning\" is set to true, please ensure that code signing configuration is correct, please see https://electron.build/code-signing`)\n      }\n      return\n    }\n\n    const certFile = cscInfo.file\n\n    if (logMessagePrefix == null) {\n      logMessagePrefix = `Signing ${path.basename(file)}`\n    }\n    if (certFile == null) {\n      if (cscInfo.subjectName == null) {\n        log(`${logMessagePrefix} (certificate SHA1: \"${cscInfo.certificateSha1}\")`)\n      }\n      else {\n        log(`${logMessagePrefix} (certificate subject name: \"${cscInfo.subjectName}\")`)\n      }\n    }\n    else {\n      log(`${logMessagePrefix} (certificate file: \"${certFile}\")`)\n    }\n\n    await WinPackager.doSign({\n      ...signOptions,\n      cert: certFile,\n      password: cscInfo.password,\n      options: {\n        ...this.platformSpecificBuildOptions,\n        certificateSubjectName: cscInfo.subjectName,\n        certificateSha1: cscInfo.certificateSha1\n      },\n    })\n  }\n\n  private static async doSign(options: WindowsSignOptions) {\n    for (let i = 0; i < 3; i++) {\n      try {\n        await sign(options)\n        break\n      }\n      catch (e) {\n        // https://github.com/electron-userland/electron-builder/issues/1414\n        const message = e.message\n        if (message != null && message.includes(\"Couldn't resolve host name\")) {\n          warn(`Cannot sign, attempt ${i + 1}: ${message}`)\n          continue\n        }\n        throw e\n      }\n    }\n  }\n\n  async signAndEditResources(file: string, arch: Arch, outDir: string, internalName?: string | null, requestedExecutionLevel?: RequestedExecutionLevel | null) {\n    const appInfo = this.appInfo\n\n    const files: Array<string> = []\n\n    const args = [\n      file,\n      \"--set-version-string\", \"FileDescription\", appInfo.productName,\n      \"--set-version-string\", \"ProductName\", appInfo.productName,\n      \"--set-version-string\", \"LegalCopyright\", appInfo.copyright,\n      \"--set-file-version\", appInfo.buildVersion,\n      \"--set-product-version\", appInfo.versionInWeirdWindowsForm,\n    ]\n\n    if (internalName != null) {\n      args.push(\n        \"--set-version-string\", \"InternalName\", internalName,\n        \"--set-version-string\", \"OriginalFilename\", \"\",\n      )\n    }\n\n    if (requestedExecutionLevel != null && requestedExecutionLevel !== \"asInvoker\") {\n      args.push(\"--set-requested-execution-level\", requestedExecutionLevel)\n    }\n\n    use(appInfo.companyName, it => args.push(\"--set-version-string\", \"CompanyName\", it!))\n    use(this.platformSpecificBuildOptions.legalTrademarks, it => args.push(\"--set-version-string\", \"LegalTrademarks\", it!))\n    const iconPath = await this.getIconPath()\n    use(iconPath, it => {\n      files.push(it)\n      args.push(\"--set-icon\", it)\n    })\n\n    const config = this.config\n    const cscInfoForCacheDigest = !isBuildCacheEnabled() || isCI || config.electronDist != null ? null : await this.cscInfo.value\n    let buildCacheManager: BuildCacheManager | null = null\n    // resources editing doesn't change executable for the same input and executed quickly - no need to complicate\n    if (cscInfoForCacheDigest != null) {\n      if (cscInfoForCacheDigest.file != null) {\n        files.push(cscInfoForCacheDigest.file)\n      }\n\n      const timer = time(\"executable cache\")\n      const hash = createHash(\"sha512\")\n      hash.update(config.electronVersion || \"no electronVersion\")\n      hash.update(config.muonVersion || \"no muonVersion\")\n      hash.update(JSON.stringify(this.platformSpecificBuildOptions))\n      hash.update(JSON.stringify(args))\n      hash.update(cscInfoForCacheDigest.certificateSha1 || \"no certificateSha1\")\n      hash.update(cscInfoForCacheDigest.subjectName || \"no subjectName\")\n\n      buildCacheManager = new BuildCacheManager(outDir, file, arch)\n      if (await buildCacheManager.copyIfValid(await digest(hash, files))) {\n        timer.end()\n        return\n      }\n      timer.end()\n    }\n\n    const timer = time(\"wine&sign\")\n    await execWine(path.join(await getSignVendorPath(), \"rcedit.exe\"), args)\n    await this.sign(file)\n    timer.end()\n\n    if (buildCacheManager != null) {\n      await buildCacheManager.save()\n    }\n  }\n\n  protected async postInitApp(packContext: AfterPackContext) {\n    const executable = path.join(packContext.appOutDir, `${this.appInfo.productFilename}.exe`)\n    await rename(path.join(packContext.appOutDir, `${this.electronDistExecutableName}.exe`), executable)\n  }\n\n  protected signApp(packContext: AfterPackContext): Promise<any> {\n    const exeFileName = `${this.appInfo.productFilename}.exe`\n    return this.signAndEditResources(path.join(packContext.appOutDir, exeFileName), packContext.arch, packContext.outDir, path.basename(exeFileName, \".exe\"), this.platformSpecificBuildOptions.requestedExecutionLevel)\n  }\n}\n\nasync function checkIcon(file: string): Promise<void> {\n  const fd = await open(file, \"r\")\n  const buffer = Buffer.allocUnsafe(512)\n  try {\n    await read(fd, buffer, 0, buffer.length, 0)\n  }\n  finally {\n    await close(fd)\n  }\n\n  if (!isIco(buffer)) {\n    throw new Error(`Windows icon is not valid ico file, please fix \"${file}\"`)\n  }\n\n  const sizes = parseIco(buffer)\n  for (const size of sizes) {\n    if (size!.w >= 256 && size!.h >= 256) {\n      return\n    }\n  }\n\n  throw new Error(`Windows icon size must be at least 256x256, please fix \"${file}\"`)\n}\n\ninterface Size {\n  w: number\n  h: number\n}\n\nfunction parseIco(buffer: Buffer): Array<Size> {\n  if (!isIco(buffer)) {\n    throw new Error(\"buffer is not ico\")\n  }\n\n  const n = buffer.readUInt16LE(4)\n  const result = new Array<Size>(n)\n  for (let i = 0; i < n; i++) {\n    result[i] = {\n      w: buffer.readUInt8(6 + i * 16) || 256,\n      h: buffer.readUInt8(7 + i * 16) || 256,\n    }\n  }\n  return result\n}\n\nfunction isIco(buffer: Buffer): boolean {\n  return buffer.readUInt16LE(0) === 0 && buffer.readUInt16LE(2) === 1\n}\n\nconst debugOpenssl = _debug(\"electron-builder:openssl\")\nasync function extractCommonNameUsingOpenssl(password: string, certPath: string): Promise<string> {\n  const result = await exec(\"openssl\", [\"pkcs12\", \"-nokeys\", \"-nodes\", \"-passin\", `pass:${password}`, \"-nomacver\", \"-clcerts\", \"-in\", certPath], {timeout: 30 * 1000, maxBuffer: 2 * 1024 * 1024}, debugOpenssl.enabled)\n  const match = result.match(/^subject.*\\/CN=([^\\/]+)$/m)\n  if (match == null || match[1] == null) {\n    throw new Error(\"Cannot extract common name from p12: \" + result)\n  }\n  else {\n    return match[1]\n  }\n}"]}
