{"version":3,"file":"AppFileWalker.js","sourceRoot":"","sources":["../../src/util/AppFileWalker.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { CONCURRENCY, FileConsumer, Filter } from \"builder-util/out/fs\"\nimport { lstat, readdir, readlink, stat, Stats } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { FileMatcher } from \"../fileMatcher\"\nimport { Packager } from \"../packager\"\nimport { Dependency, getProductionDependencies } from \"./packageDependencies\"\n\nconst nodeModulesSystemDependentSuffix = `${path.sep}node_modules`\nconst excludedFiles = new Set([\".DS_Store\", \"node_modules\" /* already in the queue */, \"CHANGELOG.md\", \"ChangeLog\", \"changelog.md\", \"binding.gyp\"])\n\n/** @internal */\nexport class AppFileWalker implements FileConsumer {\n  readonly metadata = new Map<string, Stats>()\n  readonly filter: Filter\n\n  constructor(readonly matcher: FileMatcher, readonly packager: Packager) {\n    if (!matcher.isSpecifiedAsEmptyArray && (matcher.isEmpty() || matcher.containsOnlyIgnore())) {\n      matcher.prependPattern(\"**/*\")\n    }\n    this.filter = matcher.createFilter()\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  consume(file: string, fileStat: Stats, parent: string, siblingNames: Array<string>): any {\n    if (fileStat.isDirectory()) {\n      // https://github.com/electron-userland/electron-builder/issues/1539\n      // but do not filter if we inside node_modules dir\n      if (file.endsWith(nodeModulesSystemDependentSuffix) && !parent.includes(\"node_modules\") && siblingNames.includes(\"package.json\")) {\n        return this.handleNodeModulesDir(file, parent)\n      }\n    }\n    else {\n      // save memory - no need to store stat for directory\n      this.metadata.set(file, fileStat)\n    }\n\n    return this.handleFile(file, fileStat)\n  }\n\n  private handleNodeModulesDir(nodeModulesDir: string, parent: string) {\n    const packager = this.packager\n    return (parent === packager.appDir ? packager.productionDeps.value : getProductionDependencies(parent))\n      .then(it => {\n        if (packager.debugLogger.enabled) {\n          packager.debugLogger.add(`productionDependencies.${parent}`, it.filter(it => it.path.startsWith(nodeModulesDir)).map(it => path.relative(nodeModulesDir, it.path)))\n        }\n\n        return this.copyNodeModules(it, this.filter, (file, fileStat) => {\n          this.metadata.set(file, fileStat)\n          return this.handleFile(file, fileStat)\n        })\n      })\n  }\n\n  private handleFile(file: string, fileStat: Stats) {\n    if (!fileStat.isSymbolicLink()) {\n      return null\n    }\n\n    return readlink(file)\n      .then((linkTarget): any => {\n        // http://unix.stackexchange.com/questions/105637/is-symlinks-target-relative-to-the-destinations-parent-directory-and-if-so-wh\n        return this.handleSymlink(fileStat, file, path.resolve(path.dirname(file), linkTarget))\n      })\n  }\n\n  private handleSymlink(fileStat: Stats, file: string, linkTarget: string) {\n    const link = path.relative(this.matcher.from, linkTarget)\n    if (link.startsWith(\"..\")) {\n      // outside of project, linked module (https://github.com/electron-userland/electron-builder/issues/675)\n      return stat(linkTarget)\n        .then(targetFileStat => {\n          this.metadata.set(file, targetFileStat)\n          return targetFileStat\n        })\n    }\n    else {\n      (fileStat as any).relativeLink = link\n    }\n    return null\n  }\n\n  private async copyNodeModules(list: Array<Dependency>, filter: Filter | null | undefined, consumer: (file: string, stat: Stats, parent: string, siblingNames: Array<string>) => any): Promise<Array<string>> {\n    const result: Array<string> = []\n    const queue: Array<string> = []\n    for (const dep of list) {\n      queue.length = 1\n      queue[0] = dep.path\n\n      if (dep.link != null) {\n        this.metadata.set(dep.path, dep.stat!)\n        const r = this.handleSymlink(dep.stat!, dep.path, dep.link!)\n        if (r != null) {\n          await r\n        }\n      }\n\n      while (queue.length > 0) {\n        const dirPath = queue.pop()!\n\n        const childNames = await readdir(dirPath)\n        childNames.sort()\n\n        const dirs: Array<string> = []\n        // our handler is async, but we should add sorted files, so, we add file to result not in the mapper, but after map\n        const sortedFilePaths = await BluebirdPromise.map(childNames, name => {\n          if (excludedFiles.has(name) || name.endsWith(\".h\") || name.endsWith(\".o\") || name.endsWith(\".obj\") || name.endsWith(\".cc\") || name.endsWith(\".pdb\") || name.endsWith(\".d.ts\")) {\n            return null\n          }\n\n          if (dirPath.endsWith(\"build\")) {\n            if (name === \"gyp-mac-tool\" || name === \"Makefile\" || name.endsWith(\".mk\") || name.endsWith(\".gypi\") || name.endsWith(\".Makefile\")) {\n              return null\n            }\n          }\n          else if (dirPath.endsWith(\"Release\") && (name === \".deps\" || name === \"obj.target\")) {\n            return null\n          }\n          else if (name === \"src\" && (dirPath.endsWith(\"keytar\") || dirPath.endsWith(\"keytar-prebuild\"))) {\n            return null\n          }\n          else if (dirPath.endsWith(\"lzma-native\") && (name === \"build\" || name === \"deps\")) {\n            return null\n          }\n\n          const filePath = dirPath + path.sep + name\n          return lstat(filePath)\n            .then(stat => {\n              if (filter != null && !filter(filePath, stat)) {\n                return null\n              }\n\n              const consumerResult = consumer(filePath, stat, dirPath, childNames)\n              if (consumerResult == null || !(\"then\" in consumerResult)) {\n                if (stat.isDirectory()) {\n                  dirs.push(name)\n                  return null\n                }\n                else {\n                  return filePath\n                }\n              }\n              else {\n                return (consumerResult as Promise<any>)\n                  .then(it => {\n                    // asarUtil can return modified stat (symlink handling)\n                    if ((it != null && \"isDirectory\" in it ? (it as Stats) : stat).isDirectory()) {\n                      dirs.push(name)\n                      return null\n                    }\n                    else {\n                      return filePath\n                    }\n                  })\n              }\n            })\n        }, CONCURRENCY)\n\n        for (const child of sortedFilePaths) {\n          if (child != null) {\n            result.push(child)\n          }\n        }\n\n        dirs.sort()\n        for (const child of dirs) {\n          queue.push(dirPath + path.sep + child)\n        }\n      }\n    }\n    return result\n  }\n}"]}
