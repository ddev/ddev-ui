{"version":3,"file":"asarUtil.js","sourceRoot":"","sources":["../../src/util/asarUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { AsyncTaskManager, debug, log } from \"builder-util\"\nimport { CONCURRENCY, FileCopier, Filter, MAX_FILE_REQUESTS, statOrNull } from \"builder-util/out/fs\"\nimport { createReadStream, createWriteStream, ensureDir, readFile, Stats, writeFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { AsarFilesystem, Node, readAsar } from \"../asar\"\nimport { AsarOptions } from \"../configuration\"\nimport { Packager } from \"../packager\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { NODE_MODULES_PATTERN, ResolvedFileSet } from \"./AppFileCopierHelper\"\nimport { getDestinationPath } from \"./appFileCopier\"\n\nconst isBinaryFile: any = BluebirdPromise.promisify(require(\"isbinaryfile\"))\nconst pickle = require(\"chromium-pickle-js\")\n\nfunction addValue(map: Map<string, Array<string>>, key: string, value: string) {\n  let list = map.get(key)\n  if (list == null) {\n    list = [value]\n    map.set(key, list)\n  }\n  else {\n    list.push(value)\n  }\n}\n\nexport function copyFileOrData(fileCopier: FileCopier, data: string | Buffer | undefined | null, source: string, destination: string, stats: Stats) {\n  if (data == null) {\n    return fileCopier.copy(source, destination, stats)\n  }\n  else {\n    return writeFile(destination, data)\n  }\n}\n\n/** @internal */\nexport class AsarPackager {\n  private readonly fs = new AsarFilesystem(this.src)\n  private readonly outFile: string\n\n  constructor(private readonly src: string, private readonly destination: string, private readonly options: AsarOptions, private readonly unpackPattern: Filter | null) {\n    this.outFile = path.join(destination, \"app.asar\")\n  }\n\n  // sort files to minimize file change (i.e. asar file is not changed dramatically on small change)\n  async pack(fileSets: Array<ResolvedFileSet>, packager: PlatformPackager<any>) {\n    if (this.options.ordering != null) {\n      // ordering doesn't support transformed files, but ordering is not used functionality - wait user report to fix it\n      await order(fileSets[0].files, this.options.ordering, fileSets[0].src)\n    }\n    await ensureDir(path.dirname(this.outFile))\n    for (const fileSet of fileSets) {\n      await this.createPackageFromFiles(fileSet, packager.info)\n    }\n    await this.writeAsarFile(fileSets)\n  }\n\n  private async createPackageFromFiles(fileSet: ResolvedFileSet, packager: Packager) {\n    const metadata = fileSet.metadata\n    // search auto unpacked dir\n    const unpackedDirs = new Set<string>()\n    const unpackedDest = `${this.outFile}.unpacked`\n    const rootForAppFilesWithoutAsar = path.join(this.destination, \"app\")\n\n    if (this.options.smartUnpack !== false) {\n      await detectUnpackedDirs(fileSet, unpackedDirs, unpackedDest, rootForAppFilesWithoutAsar)\n    }\n\n    const dirToCreateForUnpackedFiles = new Set<string>(unpackedDirs)\n\n    const isDirNodeUnpacked = async (filePathInArchive: string, dirNode: Node) => {\n      if (dirNode.unpacked) {\n        return\n      }\n\n      if (unpackedDirs.has(filePathInArchive)) {\n        dirNode.unpacked = true\n      }\n      else {\n        for (const dir of unpackedDirs) {\n          if (filePathInArchive.length > (dir.length + 2) && filePathInArchive[dir.length] === path.sep && filePathInArchive.startsWith(dir)) {\n            dirNode.unpacked = true\n            unpackedDirs.add(filePathInArchive)\n            // not all dirs marked as unpacked after first iteration - because node module dir can be marked as unpacked after processing node module dir content\n            // e.g. node-notifier/example/advanced.js processed, but only on process vendor/terminal-notifier.app module will be marked as unpacked\n            await ensureDir(path.join(unpackedDest, filePathInArchive))\n            break\n          }\n        }\n      }\n    }\n\n    const transformedFiles = fileSet.transformedFiles\n    const taskManager = new AsyncTaskManager(packager.cancellationToken)\n    const fileCopier = new FileCopier()\n\n    let currentDirNode: Node | null = null\n    let currentDirPath: string | null = null\n\n    for (let i = 0, n = fileSet.files.length; i < n; i++) {\n      const file = fileSet.files[i]\n      const stat = metadata.get(file)\n      const pathInArchive = path.relative(rootForAppFilesWithoutAsar, getDestinationPath(file, fileSet))\n      if (stat != null && stat.isFile()) {\n        let fileParent = path.dirname(pathInArchive)\n        if (fileParent === \".\") {\n          fileParent = \"\"\n        }\n\n        if (currentDirPath !== fileParent) {\n          currentDirPath = fileParent\n          currentDirNode = this.fs.getOrCreateNode(fileParent)\n          // do not check for root\n          if (fileParent !== \"\") {\n            await isDirNodeUnpacked(fileParent, currentDirNode)\n          }\n        }\n\n        const dirNode = currentDirNode!\n        const newData = transformedFiles == null ? null : transformedFiles[i] as string | Buffer\n        const isUnpacked = dirNode.unpacked || (this.unpackPattern != null && this.unpackPattern(file, stat))\n        this.fs.addFileNode(file, dirNode, newData == null ? stat.size : Buffer.byteLength(newData as any), isUnpacked, stat)\n        if (isUnpacked) {\n          if (newData != null) {\n            transformedFiles[i] = null\n          }\n\n          if (!dirNode.unpacked && !dirToCreateForUnpackedFiles.has(fileParent)) {\n            dirToCreateForUnpackedFiles.add(fileParent)\n            await ensureDir(path.join(unpackedDest, fileParent))\n          }\n\n          const unpackedFile = path.join(unpackedDest, pathInArchive)\n          taskManager.addTask(copyFileOrData(fileCopier, newData, file, unpackedFile, stat))\n          if (taskManager.tasks.length > MAX_FILE_REQUESTS) {\n            await taskManager.awaitTasks()\n          }\n        }\n        else if (newData == null) {\n          transformedFiles[i] = true\n        }\n      }\n      else if (stat == null || stat.isDirectory()) {\n        let unpacked = false\n        if (unpackedDirs.has(pathInArchive)) {\n          unpacked = true\n        }\n        else {\n          for (const dir of unpackedDirs) {\n            if (pathInArchive.length > (dir.length + 2) && pathInArchive[dir.length] === path.sep && pathInArchive.startsWith(dir)) {\n              unpacked = true\n              unpackedDirs.add(pathInArchive)\n              // not all dirs marked as unpacked after first iteration - because node module dir can be marked as unpacked after processing node module dir content\n              // e.g. node-notifier/example/advanced.js processed, but only on process vendor/terminal-notifier.app module will be marked as unpacked\n              await ensureDir(path.join(unpackedDest, pathInArchive))\n              break\n            }\n          }\n        }\n        this.fs.insertDirectory(pathInArchive, unpacked)\n      }\n      else if (stat.isSymbolicLink()) {\n        this.fs.getOrCreateNode(pathInArchive).link = (stat as any).relativeLink\n      }\n    }\n\n    if (taskManager.tasks.length > 0) {\n      await taskManager.awaitTasks()\n    }\n  }\n\n  private writeAsarFile(fileSets: Array<ResolvedFileSet>): Promise<any> {\n    return new BluebirdPromise((resolve, reject) => {\n      const headerPickle = pickle.createEmpty()\n      headerPickle.writeString(JSON.stringify(this.fs.header))\n      const headerBuf = headerPickle.toBuffer()\n\n      const sizePickle = pickle.createEmpty()\n      sizePickle.writeUInt32(headerBuf.length)\n\n      const sizeBuf = sizePickle.toBuffer()\n      const writeStream = createWriteStream(this.outFile)\n      writeStream.on(\"error\", reject)\n      writeStream.on(\"close\", resolve)\n      writeStream.write(sizeBuf)\n\n      let fileSetIndex = 0\n\n      let files = fileSets[0].files\n      let metadata = fileSets[0].metadata\n      let transformedFiles = fileSets[0].transformedFiles\n      const w = (index: number) => {\n        let data\n        while (true) {\n          if (index >= files.length) {\n            if (++fileSetIndex >= fileSets.length) {\n              writeStream.end()\n              return\n            }\n            else {\n              files = fileSets[fileSetIndex].files\n              metadata = fileSets[fileSetIndex].metadata\n              transformedFiles = fileSets[fileSetIndex].transformedFiles\n              index = 0\n            }\n          }\n\n          if ((data = transformedFiles[index++]) != null) {\n            break\n          }\n        }\n\n        const file = files[index - 1]\n        if (data !== true) {\n          writeStream.write(data, () => w(index))\n          return\n        }\n\n        // https://github.com/yarnpkg/yarn/pull/3539\n        const stat = metadata.get(file)\n        if (stat != null && stat.size < (4 * 1024 * 1024)) {\n          readFile(file)\n            .then(it => {\n              writeStream.write(it, () => w(index))\n            })\n            .catch(reject)\n        }\n        else {\n          const readStream = createReadStream(file)\n          readStream.on(\"error\", reject)\n          readStream.once(\"end\", () => w(index))\n          readStream.pipe(writeStream, {\n            end: false\n          })\n        }\n      }\n\n      writeStream.write(headerBuf, () => w(0))\n    })\n  }\n}\n\n/** @internal */\nexport async function checkFileInArchive(asarFile: string, relativeFile: string, messagePrefix: string) {\n  function error(text: string) {\n    return new Error(`${messagePrefix} \"${relativeFile}\" in the \"${asarFile}\" ${text}`)\n  }\n\n  let fs\n  try {\n    fs = await readAsar(asarFile)\n  }\n  catch (e) {\n    throw error(`is corrupted: ${e}`)\n  }\n\n  let stat: Node | null\n  try {\n    stat = fs.getFile(relativeFile)\n  }\n  catch (e) {\n    const fileStat = await statOrNull(asarFile)\n    if (fileStat == null) {\n      throw error(`does not exist. Seems like a wrong configuration.`)\n    }\n\n    // asar throws error on access to undefined object (info.link)\n    stat = null\n  }\n\n  if (stat == null) {\n    throw error(`does not exist. Seems like a wrong configuration.`)\n  }\n  if (stat.size === 0) {\n    throw error(`is corrupted: size 0`)\n  }\n}\n\nasync function detectUnpackedDirs(fileSet: ResolvedFileSet, autoUnpackDirs: Set<string>, unpackedDest: string, rootForAppFilesWithoutAsar: string) {\n  const dirToCreate = new Map<string, Array<string>>()\n  const metadata = fileSet.metadata\n\n  function addParents(child: string, root: string) {\n    child = path.dirname(child)\n    if (autoUnpackDirs.has(child)) {\n      return\n    }\n\n    do {\n      autoUnpackDirs.add(child)\n      const p = path.dirname(child)\n      // create parent dir to be able to copy file later without directory existence check\n      addValue(dirToCreate, p, path.basename(child))\n\n      if (child === root || p === root || autoUnpackDirs.has(p)) {\n        break\n      }\n      child = p\n    }\n    while (true)\n\n    autoUnpackDirs.add(root)\n  }\n\n  for (let i = 0, n = fileSet.files.length; i < n; i++) {\n    const file = fileSet.files[i]\n    const index = file.lastIndexOf(NODE_MODULES_PATTERN)\n    if (index < 0) {\n      continue\n    }\n\n    let nextSlashIndex = file.indexOf(path.sep, index + NODE_MODULES_PATTERN.length + 1)\n    if (nextSlashIndex < 0) {\n      continue\n    }\n\n    if (file[index + NODE_MODULES_PATTERN.length] === \"@\") {\n      nextSlashIndex = file.indexOf(path.sep, nextSlashIndex + 1)\n    }\n\n    if (!metadata.get(file)!.isFile()) {\n      continue\n    }\n\n    const packageDir = file.substring(0, nextSlashIndex)\n    const packageDirPathInArchive = path.relative(rootForAppFilesWithoutAsar, getDestinationPath(packageDir, fileSet))\n    const pathInArchive = path.relative(rootForAppFilesWithoutAsar, getDestinationPath(file, fileSet))\n    if (autoUnpackDirs.has(packageDirPathInArchive)) {\n      // if package dir is unpacked, any file also unpacked\n      addParents(pathInArchive, packageDirPathInArchive)\n      continue\n    }\n\n    let shouldUnpack = false\n    if (file.endsWith(\".dll\") || file.endsWith(\".exe\")) {\n      shouldUnpack = true\n    }\n    else if (!file.includes(\".\", nextSlashIndex) && path.extname(file) === \"\") {\n      shouldUnpack = await isBinaryFile(file)\n    }\n\n    if (!shouldUnpack) {\n      continue\n    }\n\n    if (debug.enabled) {\n      debug(`${pathInArchive} is not packed into asar archive - contains executable code`)\n    }\n\n    addParents(pathInArchive, packageDirPathInArchive)\n  }\n\n  if (dirToCreate.size > 0) {\n    await ensureDir(unpackedDest + path.sep + \"node_modules\")\n    // child directories should be not created asynchronously - parent directories should be created first\n    await BluebirdPromise.map(dirToCreate.keys(), async parentDir => {\n      const base = unpackedDest + path.sep + parentDir\n      await ensureDir(base)\n      await BluebirdPromise.each(dirToCreate.get(parentDir)!, (it): any => {\n        if (dirToCreate.has(parentDir + path.sep + it)) {\n          // already created\n          return null\n        }\n        else {\n          return ensureDir(base + path.sep + it)\n        }\n      })\n    }, CONCURRENCY)\n  }\n}\n\nasync function order(filenames: Array<string>, orderingFile: string, src: string) {\n  const orderingFiles = (await readFile(orderingFile, \"utf8\")).split(\"\\n\").map(line => {\n    if (line.indexOf(\":\") !== -1) {\n      line = line.split(\":\").pop()!\n    }\n    line = line.trim()\n    if (line[0] === \"/\") {\n      line = line.slice(1)\n    }\n    return line\n  })\n\n  const ordering: Array<string> = []\n  for (const file of orderingFiles) {\n    const pathComponents = file.split(path.sep)\n    for (const pathComponent of pathComponents) {\n      ordering.push(path.join(src, pathComponent))\n    }\n  }\n\n  const sortedFiles: Array<string> = []\n  let missing = 0\n  const total = filenames.length\n  for (const file of ordering) {\n    if (!sortedFiles.includes(file) && filenames.includes(file)) {\n      sortedFiles.push(file)\n    }\n  }\n  for (const file of filenames) {\n    if (!sortedFiles.includes(file)) {\n      sortedFiles.push(file)\n      missing += 1\n    }\n  }\n  log(`Ordering file has ${((total - missing) / total * 100)}% coverage.`)\n  return sortedFiles\n}"]}
