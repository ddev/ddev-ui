{"version":3,"file":"configuration.js","sourceRoot":"","sources":["../src/configuration.ts"],"names":[],"mappings":"","sourcesContent":["import { AsarIntegrityOptions } from \"asar-integrity\"\nimport { Arch } from \"builder-util\"\nimport { Publish } from \"builder-util-runtime\"\nimport { BeforeBuildContext, CompressionLevel, Target, TargetConfiguration, TargetSpecificOptions } from \"./core\"\nimport { AppImageOptions, DebOptions, LinuxConfiguration, LinuxTargetSpecificOptions } from \"./options/linuxOptions\"\nimport { DmgOptions, MacConfiguration, MasConfiguration, PkgOptions } from \"./options/macOptions\"\nimport { SnapOptions } from \"./options/SnapOptions\"\nimport { SquirrelWindowsOptions } from \"./options/SquirrelWindowsOptions\"\nimport { AppXOptions, WindowsConfiguration } from \"./options/winOptions\"\nimport { PlatformPackager } from \"./platformPackager\"\nimport { NsisOptions, NsisWebOptions, PortableOptions } from \"./targets/nsis/nsisOptions\"\n\n/**\n * Configuration Options\n */\nexport interface Configuration extends PlatformSpecificBuildOptions {\n  /**\n   * The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n   * [Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.\n   * @default com.electron.${name}\n   */\n  readonly appId?: string | null\n\n  /**\n   * As [name](#Metadata-name), but allows you to specify a product name for your executable which contains spaces and other special characters not allowed in the [name property](https://docs.npmjs.com/files/package.json#name}).\n   */\n  readonly productName?: string | null\n\n  /**\n   * The [artifact file name template](/configuration/configuration.md#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).\n   */\n  readonly artifactName?: string | null\n\n  /**\n   * Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n   *\n   * Node modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work.\n   * @default true\n  */\n  readonly asar?: boolean | AsarOptions | null\n\n  /**\n   * A [glob patterns](/file-patterns.md) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive.\n   */\n  readonly asarUnpack?: Array<string> | string | null\n\n  /**\n   * The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time.\n   * @default normal\n   */\n  readonly compression?: CompressionLevel | null\n\n  /**\n   * The human-readable copyright line for the app.\n   * @default Copyright © year ${author}\n   */\n  readonly copyright?: string | null\n\n  publish?: Publish\n\n  readonly directories?: MetadataDirectories | null\n\n  readonly files?: Array<FileSet | string> | FileSet | string | null\n\n  readonly extraResources?: Array<FileSet | string> | FileSet | string | null\n\n  readonly extraFiles?: Array<FileSet | string> | FileSet | string | null\n\n  /**\n   * The file associations.\n   */\n  readonly fileAssociations?: Array<FileAssociation> | FileAssociation\n  /**\n   * The URL protocol schemes.\n   */\n  readonly protocols?: Array<Protocol> | Protocol\n\n  /**\n   * Options related to how build macOS targets.\n   */\n  readonly mac?: MacConfiguration | null\n  /**\n   * MAS (Mac Application Store) options.\n   */\n  readonly mas?: MasConfiguration | null\n  /**\n   * macOS DMG options.\n   */\n  readonly dmg?: DmgOptions | null\n  /**\n   * macOS PKG options.\n   */\n  readonly pkg?: PkgOptions | null\n\n  /**\n   * Options related to how build Windows targets.\n   */\n  readonly win?: WindowsConfiguration | null\n  readonly nsis?: NsisOptions | null\n  readonly nsisWeb?: NsisWebOptions | null\n  readonly portable?: PortableOptions | null\n  readonly appx?: AppXOptions | null\n  readonly squirrelWindows?: SquirrelWindowsOptions | null\n\n  /**\n   * Options related to how build Linux targets.\n   */\n  readonly linux?: LinuxConfiguration | null\n  /**\n   * Debian package options.\n   */\n  readonly deb?: DebOptions | null\n  /**\n   * Snap options.\n   */\n  readonly snap?: SnapOptions | null\n  /**\n   * AppImage options.\n   */\n  readonly appImage?: AppImageOptions | null\n  readonly pacman?: LinuxTargetSpecificOptions | null\n  readonly rpm?: LinuxTargetSpecificOptions | null\n  readonly freebsd?: LinuxTargetSpecificOptions | null\n  readonly p5p?: LinuxTargetSpecificOptions | null\n  readonly apk?: LinuxTargetSpecificOptions | null\n\n  /**\n   * Whether to build the application native dependencies from source.\n   * @default false\n   */\n  buildDependenciesFromSource?: boolean\n  /**\n   * Whether to execute `node-gyp rebuild` before starting to package the app.\n   *\n   * Don't [use](https://github.com/electron-userland/electron-builder/issues/683#issuecomment-241214075) [npm](http://electron.atom.io/docs/tutorial/using-native-node-modules/#using-npm) (neither `.npmrc`) for configuring electron headers. Use `electron-builder node-gyp-rebuild` instead.\n   * @default false\n   */\n  readonly nodeGypRebuild?: boolean\n  /**\n   * Additional command line arguments to use when installing app native deps.\n   */\n  readonly npmArgs?: Array<string> | string | null\n  /**\n   * Whether to [rebuild](https://docs.npmjs.com/cli/rebuild) native dependencies before starting to package the app.\n   * @default true\n   */\n  readonly npmRebuild?: boolean\n  /**\n   * @deprecated Please use npmBuildFromSource.\n   * @private\n   */\n  readonly npmSkipBuildFromSource?: boolean\n\n  /**\n   * The build version. Maps to the `CFBundleVersion` on macOS, and `FileVersion` metadata property on Windows. Defaults to the `version`.\n   * If `TRAVIS_BUILD_NUMBER` or `APPVEYOR_BUILD_NUMBER` or `CIRCLE_BUILD_NUM` or `BUILD_NUMBER` or `bamboo.buildNumber` env defined, it will be used as a build version (`version.build_number`).\n   */\n  readonly buildVersion?: string | null\n\n  /**\n   * Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.\n   * @default true\n   */\n  readonly detectUpdateChannel?: boolean\n\n  /**\n   * Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).\n   * @default false\n   */\n  readonly generateUpdatesFilesForAllChannels?: boolean\n\n  /**\n   * Whether to use [electron-compile](http://github.com/electron/electron-compile) to compile app. Defaults to `true` if `electron-compile` in the dependencies. And `false` if in the `devDependencies` or doesn't specified.\n   */\n  readonly electronCompile?: boolean\n\n  /**\n   * The path to custom Electron build (e.g. `~/electron/out/R`).\n   */\n  readonly electronDist?: string\n\n  /**\n   * The [electron-download](https://github.com/electron-userland/electron-download#usage) options.\n   */\n  readonly electronDownload?: ElectronDownloadOptions\n\n  /**\n   * The version of electron you are packaging for. Defaults to version of `electron`, `electron-prebuilt` or `electron-prebuilt-compile` dependency.\n   */\n  electronVersion?: string | null\n\n  /**\n   * The name of a built-in configuration preset or path to config file (relative to project dir). Currently, only `react-cra` is supported.\n   *\n   * If `react-scripts` in the app dev dependencies, `react-cra` will be set automatically. Set to `null` to disable automatic detection.\n   */\n  extends?: string | null\n\n  /**\n   * Inject properties to `package.json`.\n   */\n  readonly extraMetadata?: any\n\n  /**\n   * Whether to fail if the application is not signed (to prevent unsigned app if code signing configuration is not correct).\n   * @default false\n   */\n  readonly forceCodeSigning?: boolean\n\n  /**\n   * The version of muon you are packaging for.\n   */\n  readonly muonVersion?: string | null\n\n  /**\n   * The release info. Intended for command line usage:\n   *\n   * ```\n   * -c.releaseInfo.releaseNotes=\"new features\"\n   * ```\n   */\n  readonly releaseInfo?: ReleaseInfo\n\n  /**\n   * The function (or path to file or module id) to be run after pack (but before pack into distributable format and sign).\n   */\n  readonly afterPack?: (context: AfterPackContext) => Promise<any> | null\n  /**\n   * The function (or path to file or module id) to be run before dependencies are installed or rebuilt. Works when `npmRebuild` is set to `true`. Resolving to `false` will skip dependencies install or rebuild.\n   */\n  readonly beforeBuild?: (context: BeforeBuildContext) => Promise<any> | null\n\n  /** @private */\n  readonly icon?: string | null\n}\n\nexport interface AfterPackContext {\n  readonly outDir: string\n  readonly appOutDir: string\n  readonly packager: PlatformPackager<any>\n  readonly electronPlatformName: string\n  readonly arch: Arch\n  readonly targets: Array<Target>\n}\n\nexport interface MetadataDirectories {\n  /**\n   * The path to build resources.\n   *\n   * Please note — build resources is not packed into the app. If you need to use some files, e.g. as tray icon, please include required files explicitly: `\"files\": [\"**\\/*\", \"build/icon.*\"]`\n   * @default build\n   */\n  readonly buildResources?: string | null\n\n  /**\n   * The output directory.\n   * @default dist\n   */\n  readonly output?: string | null\n\n  /**\n   * The application directory (containing the application package.json), defaults to `app`, `www` or working directory.\n   */\n  readonly app?: string | null\n}\n\n/**\n * URL Protocol Schemes. Protocols to associate the app with. macOS only.\n *\n * Please note — on macOS [you need to register an `open-url` event handler](http://electron.atom.io/docs/api/app/#event-open-url-macos).\n */\nexport interface Protocol {\n  /**\n   * The name. e.g. `IRC server URL`.\n   */\n  readonly name: string\n\n  /**\n   * The schemes. e.g. `[\"irc\", \"ircs\"]`.\n  */\n  readonly schemes: Array<string>\n\n  /**\n   * *macOS-only* The app’s role with respect to the type.\n   * @default Editor\n   */\n  readonly role?: \"Editor\" | \"Viewer\" | \"Shell\" | \"None\"\n}\n\n/**\n * File associations.\n *\n * macOS (corresponds to [CFBundleDocumentTypes](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-101685)) and NSIS only.\n *\n * On Windows works only if [nsis.perMachine](https://electron.build/configuration/configuration#NsisOptions-perMachine) is set to `true`.\n */\nexport interface FileAssociation {\n  /**\n   * The extension (minus the leading period). e.g. `png`.\n   */\n  readonly ext: string | Array<string>\n\n  /**\n   * The name. e.g. `PNG`. Defaults to `ext`.\n   */\n  readonly name?: string | null\n\n  /**\n   * *windows-only.* The description.\n   */\n  readonly description?: string | null\n\n  /**\n   * The path to icon (`.icns` for MacOS and `.ico` for Windows), relative to `build` (build resources directory). Defaults to `${firstExt}.icns`/`${firstExt}.ico` (if several extensions specified, first is used) or to application icon.\n   */\n  readonly icon?: string | null\n\n  /**\n   * *macOS-only* The app’s role with respect to the type. The value can be `Editor`, `Viewer`, `Shell`, or `None`. Corresponds to `CFBundleTypeRole`.\n   * @default Editor\n   */\n  readonly role?: string\n\n  /**\n   * *macOS-only* Whether the document is distributed as a bundle. If set to true, the bundle directory is treated as a file. Corresponds to `LSTypeIsPackage`.\n   */\n  readonly isPackage?: boolean\n}\n\nexport interface PlatformSpecificBuildOptions extends TargetSpecificOptions {\n  readonly files?: Array<FileSet | string> | FileSet | string | null\n  readonly extraFiles?: Array<FileSet | string> | FileSet | string | null\n  readonly extraResources?: Array<FileSet | string> | FileSet | string | null\n\n  readonly asarUnpack?: Array<string> | string | null\n\n  readonly asar?: AsarOptions | boolean | null\n\n  readonly target?: Array<string | TargetConfiguration> | string | TargetConfiguration | null\n\n  readonly icon?: string | null\n\n  readonly fileAssociations?: Array<FileAssociation> | FileAssociation\n\n  readonly forceCodeSigning?: boolean\n}\n\nexport interface AsarOptions extends AsarIntegrityOptions {\n  /**\n   * Whether to automatically unpack executables files.\n   * @default true\n   */\n  smartUnpack?: boolean\n\n  ordering?: string | null\n}\n\nexport interface FileSet {\n  /**\n   * The source path relative to the project directory.\n   */\n  from?: string\n  /**\n   * The destination path relative to the app's content directory for `extraFiles` and the app's resource directory for `extraResources`.\n   */\n  to?: string\n  /**\n   * The [glob patterns](/file-patterns.md).\n   */\n  filter?: Array<string> | string\n}\n\nexport interface ReleaseInfo {\n  /**\n   * The release name.\n   */\n  releaseName?: string | null\n\n  /**\n   * The release notes.\n   */\n\n  releaseNotes?: string | null\n\n  /**\n   * The path to release notes file. Defaults to `release-notes.md` in the [build resources](#MetadataDirectories-buildResources).\n   */\n  releaseNotesFile?: string | null\n\n  /**\n   * The release date.\n   */\n  releaseDate?: string\n}\n\nexport interface ElectronDownloadOptions {\n  /**\n   * The [cache location](https://github.com/electron-userland/electron-download#cache-location).\n   */\n  cache?: string | null\n\n  /**\n   * The mirror.\n   */\n  mirror?: string | null\n\n  /** @private */\n  customDir?: string | null\n  /** @private */\n  customFilename?: string | null\n\n  quiet?: boolean\n\n  strictSSL?: boolean\n  verifyChecksum?: boolean\n\n  /** @private */\n  force?: boolean\n}"]}
