{"version":3,"file":"blockMap.js","sourceRoot":"","sources":["../src/blockMap.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { hashFile } from \"builder-util\"\nimport { PackageFileInfo } from \"builder-util-runtime\"\nimport { BlockMap, SIGNATURE_HEADER_SIZE } from \"builder-util-runtime/out/blockMapApi\"\nimport { createHash } from \"crypto\"\nimport { appendFile, read, stat } from \"fs-extra-p\"\nimport { safeDump } from \"js-yaml\"\nimport { Archive } from \"./Archive\"\nimport { SevenZArchiveEntry } from \"./SevenZArchiveEntry\"\nimport { SevenZFile } from \"./SevenZFile\"\n\nconst deflateRaw: any = BluebirdPromise.promisify(require(\"zlib\").deflateRaw)\n\n/*\nApproach like AppX block map, but with one difference - block not compressed individually, instead, the whole file is compressed using LZMA compression.\nSee (Package File in the developer readme) about compression. So, delta will be not ideal (because compressed data can change not only actually changed block in the file, but others,\nand we don't set even dict size and default 64M is used), but full package size will be still relative small and will save initial download time/costs.\n */\n\n// reduce dict size to avoid large block invalidation on change\nexport async function createDifferentialPackage(archiveFile: string): Promise<PackageFileInfo> {\n  // compute block map using compressed file data\n  const sevenZFile = new SevenZFile(archiveFile)\n  try {\n    const archive = await sevenZFile.read()\n    const blockMap = await computeBlockMap(sevenZFile)\n    sevenZFile.close()\n\n    const blockMapDataString = safeDump(blockMap)\n    const blockMapFileData = await deflateRaw(blockMapDataString, {level: 9})\n    await appendFile(archiveFile, blockMapFileData)\n    const packageFileInfo = await createPackageFileInfo(archiveFile)\n    packageFileInfo.headerSize = archive.headerSize\n    packageFileInfo.blockMapSize = blockMapFileData.length\n    packageFileInfo.blockMapData = blockMapDataString\n    return packageFileInfo\n  }\n  catch (e) {\n    sevenZFile.close()\n    throw e\n  }\n}\n\nexport async function createPackageFileInfo(file: string): Promise<PackageFileInfo> {\n  return {\n    file,\n    size: (await stat(file)).size,\n    sha512: await hashFile(file),\n  }\n}\n\nasync function computeBlocks(fd: number, start: number, end: number): Promise<Array<string>> {\n  const chunkSize = 64 * 1024\n  const buffer = Buffer.allocUnsafe(chunkSize)\n  const blocks = []\n\n  for (let offset = start; offset < end; offset += chunkSize) {\n    const actualChunkSize = Math.min(end - offset, chunkSize)\n    await read(fd, buffer, 0, actualChunkSize, offset)\n\n    const hash = createHash(\"md5\")\n    hash.update(actualChunkSize === chunkSize ? buffer : buffer.slice(0, actualChunkSize))\n    // node-base91 doesn't make a lot of sense - 29KB vs 30KB Because for base64 string value in the yml never escaped, but node-base91 often escaped (single quotes) and it adds extra 2 symbols.\n    // And in any case data stored as deflated in the package.\n    blocks.push(hash.digest(\"base64\"))\n  }\n\n  return blocks\n}\n\nclass BlockMapBuilder {\n  private currentFolderIndex = -1\n\n  constructor(private readonly archive: Archive) {\n  }\n\n  // noinspection BadExpressionStatementJS\n  buildFile(file: SevenZArchiveEntry) {\n    const archive = this.archive\n\n    const folderIndex = file.blockIndex\n    if (folderIndex < 0) {\n      // empty file\n      file.dataStart = 0\n      file.dataEnd = 0\n      return\n    }\n\n    if (folderIndex === this.currentFolderIndex) {\n      throw new Error(\"Solid not supported\")\n    }\n\n    this.currentFolderIndex = folderIndex\n\n    const folder = archive.folders[folderIndex]\n    const firstPackStreamIndex = folder.firstPackedStreamIndex\n    const folderOffset = SIGNATURE_HEADER_SIZE + archive.packPosition + archive.streamMap.packStreamOffsets[firstPackStreamIndex]\n\n    let size = 0\n    for (let i = 0; i < folder.packedStreams.length; i++) {\n      size += archive.packedSizes[firstPackStreamIndex + i]\n    }\n\n    file.dataStart = folderOffset\n    file.dataEnd = folderOffset + size\n    // console.log(`${file.name} ${size}, ${folder.totalInputStreams}`)\n  }\n}\n\nexport async function computeBlockMap(sevenZFile: SevenZFile): Promise<BlockMap> {\n  const archive = sevenZFile.archive\n  const builder = new BlockMapBuilder(archive)\n\n  const files: Array<SevenZArchiveEntry> = []\n  for (const file of archive.files) {\n    if (!file.isDirectory) {\n      builder.buildFile(file)\n      // do not add empty files\n      if (file.dataStart !== file.dataEnd) {\n        files.push(file)\n      }\n    }\n  }\n\n  // just to be sure that file data really doesn't have gap and grouped one by one\n  for (let i = 0; i < (files.length - 1); i++) {\n    if (files[i].dataEnd !== files[i + 1].dataStart) {\n      throw new Error(\"Must be no gap\")\n    }\n  }\n\n  const blocks = await BluebirdPromise.map(files, async entry => {\n    const blocks = await computeBlocks(sevenZFile.fd, entry.dataStart, entry.dataEnd)\n    return {\n      name: entry.name.replace(/\\\\/g, \"/\"),\n      offset: entry.dataStart,\n      size: entry.dataEnd - entry.dataStart,\n      blocks,\n    }\n  }, {concurrency: 4})\n  return {\n    blockSize: 64,\n    hashMethod: \"md5\",\n    compressionLevel: 9,\n    files: blocks,\n  }\n}"]}
