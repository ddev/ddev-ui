{"version":3,"file":"license.js","sourceRoot":"","sources":["../src/license.ts"],"names":[],"mappings":";;;;;;;;;;;;;;oEAyBO,AAAK,WAA0B,AAAwB;AAC5D,AAAM,iCAAmB,MAAM,AAAQ,SAAC,AAAY,AAAC,cAClD,AAAM,OAAC,AAAE;AACR,kBAAM,AAAI,OAAG,AAAE,GAAC,AAAW,AAAE;AAC7B,AAAM,mBAAC,CAAC,AAAI,KAAC,AAAU,WAAC,AAAU,AAAC,eAAI,AAAI,KAAC,AAAU,WAAC,AAAO,AAAC,AAAC,AAAI,cAAC,AAAI,KAAC,AAAQ,SAAC,AAAM,AAAC,WAAI,AAAI,KAAC,AAAQ,SAAC,AAAM,AAAC,AAAC,AACtH;AAAC,AAAC,SAJoB,CAAjB,AAAgB,EAIjB,AAAQ,AAAC,AACjB;AAAC;;;;;;;;;;;AA/BD,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAE5B,AAAO,AAAE,AAAY,AAAE,AAAgB,AAAE,AAAM,AAAS,AAExD,AAAM;;;;;;0BAA2B,AAAwB,WAAE,AAAwB;AACjF,AAAM,qBAAW,AAAI,KAAC,CAAC,AAAC,GAAE,AAAC;AACzB,cAAM,AAAE,KAAG,AAAC,EAAC,AAAQ,QAAC,AAAK,AAAC,gBAAG,AAAC,IAAG,AAAG;AACtC,cAAM,AAAE,KAAG,AAAC,EAAC,AAAQ,QAAC,AAAK,AAAC,gBAAG,AAAC,IAAG,AAAG;AACtC,AAAM,eAAC,AAAE,OAAK,AAAE,KAAG,AAAC,EAAC,AAAa,cAAC,AAAC,AAAC,KAAG,AAAE,KAAG,AAAE,AACjD;AAAC,AAAC,KAJK,AAAS,EAKb,AAAG,IAAC,AAAI;AACP,YAAI,AAAI,OAAG,AAAI,KAAC,AAAK,MAAC,AAAY,AAAE,cAAC,AAAC,AAAC;AACvC,YAAI,AAAc;AAClB,AAAE,AAAC,YAAC,AAAI,KAAC,AAAQ,QAAC,AAAG,AAAC,AAAC,aAAC,AAAC;AACvB,AAAc,6BAAG,AAAI;AACrB,AAAI,mBAAG,AAAc,eAAC,AAAS,UAAC,AAAC,GAAE,AAAI,KAAC,AAAO,QAAC,AAAG,AAAC,AAAC,AACvD;AAAC,AACD,AAAI,eAAC,AAAC;AACJ,AAAI,mBAAG,AAAI,KAAC,AAAW,AAAE;AACzB,AAAc,6BAAG,AAAgB,gDAAC,AAAI,AAAC,AACzC;AAAC;AACD,AAAM,eAAC,EAAC,AAAI,MAAE,AAAI,MAAC,AAAI,KAAC,AAAQ,SAAC,AAAiB,mBAAE,AAAI,AAAC,OAAE,AAAI,MAAE,AAAc,gBAAE,AAAQ,UAAG,AAAoB,uCAAC,AAAI,AAAC,AAAC,AACzH;AAAC,AAAC,AACN;AAAC,AAED,AAAM","sourcesContent":["import * as path from \"path\"\nimport { PackageBuilder } from \"./api\"\nimport { langIdToName, toLangWithRegion } from \"./langs\"\n\nexport function getLicenseAssets(fileNames: Array<string>, packager: PackageBuilder) {\n  return fileNames.sort((a, b) => {\n    const aW = a.includes(\"_en\") ? 0 : 100\n    const bW = b.includes(\"_en\") ? 0 : 100\n    return aW === bW ? a.localeCompare(b) : aW - bW\n  })\n    .map(file => {\n      let lang = file.match(/_([^.]+)\\./)![1]\n      let langWithRegion\n      if (lang.includes(\"_\")) {\n        langWithRegion = lang\n        lang = langWithRegion.substring(0, lang.indexOf(\"_\"))\n      }\n      else {\n        lang = lang.toLowerCase()\n        langWithRegion = toLangWithRegion(lang)\n      }\n      return {file: path.join(packager.buildResourcesDir, file), lang, langWithRegion, langName: (langIdToName as any)[lang]}\n    })\n}\n\nexport async function getLicenseFiles(packager: PackageBuilder): Promise<Array<LicenseFile>> {\n  return getLicenseAssets((await packager.resourceList)\n    .filter(it => {\n      const name = it.toLowerCase()\n      return (name.startsWith(\"license_\") || name.startsWith(\"eula_\")) && (name.endsWith(\".rtf\") || name.endsWith(\".txt\"))\n    }), packager)\n}\n\nexport interface LicenseFile {\n  file: string\n  lang: string\n  langWithRegion: string\n  langName: string\n}"]}
